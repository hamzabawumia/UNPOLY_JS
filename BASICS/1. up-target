Example



<div class="story">

  <p>Story summary</p>

  <a href="full.html" up-target=".story">
    Read full story
  </a>

</div>

<p>This text won't change</p>

EXPLANATION:
Unpoly requests full.html via AJAX
Server renders a full HTML page
Unpoly extracts the fragment that matches .story
Unpoly swaps the old and new fragment
Unpoly changes the browser URL to http://host/full.html


Example 2
Let's say we are rendering three pages with a tabbed navigation to switch between screens:

Your HTML could look like this:

<nav>
  <a href="/pages/a">A</a>
  <a href="/pages/b">B</a>
  <a href="/pages/b">C</a>
</nav>

<article>
  Page A
</article>
Since we only want to update the <article> tag, we annotate the links with an up-target attribute:

<nav>
  <a href="/pages/a" up-target="article">A</a>
  <a href="/pages/b" up-target="article">B</a>
  <a href="/pages/b" up-target="article">C</a>
</nav>
Note that instead of article you can use any other CSS selector like #main .article.

example:

<div class="1st_div">
  Card #1 preview
  <a href="/cards/1" up-target=".card">Show full card #1</a>
</div>

<div class="card">
  Card #2 preview
  <a href="/cards/2" up-target=".1st_div">Show full card #2</a>
</div>


Updating multiple fragments
You can update multiple fragments from a single request by separating separators with a comma (like in CSS).

For instance, if opening a post should also update a bubble showing the number of unread posts, you might do this:

<a href="/posts/5" up-target=".content, .unread-count">Read post</a>



Replacing an element's inner HTML
If you would like to preserve the target element, but replace all of its child content, use the :content pseudo selector:

<a href="/cards/5" up-target=".card:content">Show card #5</a>


...
